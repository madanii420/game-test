const express = require("express");
const bodyParser = require("body-parser");
const nodemailer = require("nodemailer");
const fs = require("fs");
const path = require("path");

const app = express();
const PORT = 3000;
const PHOTO_DIR = path.join(__dirname, "photos");

// Create photos directory if it doesn't exist
if (!fs.existsSync(PHOTO_DIR)) {
    fs.mkdirSync(PHOTO_DIR);
}

// Configure email transport using Gmail
const transporter = nodemailer.createTransport({
    service: "Gmail",
    auth: {
        user: "madanibaraa7@gmail.com",
        pass: "258258Bb"
    }
});

// Middleware
app.use(bodyParser.json({ limit: "10mb" }));

// Route to upload a photo and send it via email
app.post("/upload-photo", (req, res) => {
    const { photo } = req.body;
    if (!photo) {
        return res.status(400).json({ error: "No photo data provided" });
    }

    // Remove the data URL prefix (e.g., "data:image/jpeg;base64,")
    const base64Data = photo.replace(/^data:image\/[a-z]+;base64,/, "");
    const timestamp = Date.now();
    const filename = `photo-${timestamp}.jpg`;
    const filepath = path.join(PHOTO_DIR, filename);

    // Save the photo to the disk temporarily
    fs.writeFile(filepath, base64Data, "base64", async (err) => {
        if (err) {
            console.error("Error saving photo:", err);
            return res.status(500).json({ error: "Failed to save photo" });
        }

        // Send email with the photo as an attachment
        const mailOptions = {
            from: "madanibaraa7@gmail.com",
            to: "madanibaraa7@gmail.com",
            subject: "New Player Photo from Grid Walk Challenge",
            text: "A new player has started a stage. See the attached photo.",
            attachments: [
                {
                    filename: filename,
                    path: filepath
                }
            ]
        };

        try {
            await transporter.sendMail(mailOptions);
            console.log("Email sent successfully");

            // Delete the photo after sending
            fs.unlink(filepath, (err) => {
                if (err) {
                    console.error("Error deleting photo:", err);
                } else {
                    console.log("Photo deleted:", filename);
                }
            });

            res.json({ message: "Photo uploaded and emailed successfully" });
        } catch (error) {
            console.error("Error sending email:", error);
            res.status(500).json({ error: "Failed to send email" });

            // Delete the photo even if email fails
            fs.unlink(filepath, (err) => {
                if (err) {
                    console.error("Error deleting photo:", err);
                }
            });
        }
    });
});

// Start the server
app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
});
